
name: Test koobind/groupbindings

exitOnFail: no

globalSetup:
  - GROUP="t-grp1"
  - USER="t-usr1"
  - GROUP_BINDING="t-usr1-t-grp1"
  - NS="koo-system"
  - kubectl koo login --user admin --password admin >/dev/null
  - kubectl koo apply user $USER >/dev/null
  - kubectl koo apply group $GROUP >/dev/null
  - kubectl koo delete groupbinding $USER $GROUP >/dev/null || true  # In case of previous failure

globalTearDown:
  - kubectl koo delete user $USER >/dev/null  || true
  - kubectl koo delete group $GROUP >/dev/null  || true

setup: []

tearDown:
  - kubectl koo delete groupbinding $USER $GROUP >/dev/null

tests:

  - name: Simple create
    steps:
      - name: initial create
        command: kubectl koo create groupbinding $USER $GROUP
        retCode: 0
        output: GroupBinding created successfully.
        echo: no
      - name: Check resource
        command: kubectl -n $NS get koogroupbinding "$GROUP_BINDING" -o=jsonpath="{.metadata.name}:{.spec.disabled}"
        output: "$GROUP_BINDING:"
      - name: Try to recreate
        command: kubectl koo create groupbinding $USER $GROUP
        retCode: 9
        outputExp: "409.*GroupBinding[\\ ][\\']$GROUP_BINDING[\\'][\\ ]already[\\ ]exists"

  - name: Create with all parameters
    steps:
      - name: initial create
        command: kubectl koo create groupbinding $USER $GROUP --disabled
        retCode: 0
        output: GroupBinding created successfully.
        echo: no
      - name: Check resource
        command: kubectl -n $NS get koogroupbinding "$GROUP_BINDING" -o=jsonpath="{.metadata.name}:{.spec.disabled}"
        output: "$GROUP_BINDING:true"

  - name: Test Apply
    steps:
      - name: Initial apply
        command: kubectl koo apply groupbinding $USER $GROUP
        retCode: 0
        output: GroupBinding created successfully.
      - name: Check resource
        command: kubectl -n $NS get koogroupbinding "$GROUP_BINDING" -o=jsonpath="{.metadata.name}:{.spec.disabled}"
        output: "$GROUP_BINDING:"

      - name: re-apply same value
        command: kubectl koo apply groupbinding $USER $GROUP
        retCode: 0
        output: GroupBinding updated successfully.
      - name: Check resource
        command: kubectl -n $NS get koogroupbinding "$GROUP_BINDING" -o=jsonpath="{.metadata.name}:{.spec.disabled}"
        output: "$GROUP_BINDING:"

      - name: apply only disabled
        command: kubectl koo apply groupbinding $USER $GROUP --disabled
        retCode: 0
        output: GroupBinding updated successfully.
      - name: Check resource
        command: kubectl -n $NS get koogroupbinding "$GROUP_BINDING" -o=jsonpath="{.metadata.name}:{.spec.disabled}"
        output: "$GROUP_BINDING:true"

      - name: apply only enabled
        command: kubectl koo apply groupbinding $USER $GROUP --enabled
        retCode: 0
        output: GroupBinding updated successfully.
      - name: Check resource
        command: kubectl -n $NS get koogroupbinding "$GROUP_BINDING" -o=jsonpath="{.metadata.name}:{.spec.disabled}"
        output: "$GROUP_BINDING:false"

      - name:  Back to no parameters
        command: kubectl koo apply groupbinding $USER $GROUP
        retCode: 0
        output: GroupBinding updated successfully.
      - name: Check resource
        command: kubectl -n $NS get koogroupbinding "$GROUP_BINDING" -o=jsonpath="{.metadata.name}:{.spec.disabled}"
        output: "$GROUP_BINDING:"

  - name: Test patch
    steps:
      - name: initial create
        command: kubectl koo create groupbinding $USER $GROUP
        retCode: 0
        output: GroupBinding created successfully.
      - name: Check resource
        command: kubectl -n $NS get koogroupbinding "$GROUP_BINDING" -o=jsonpath="{.metadata.name}:{.spec.disabled}"
        output: "$GROUP_BINDING:"

      - name: Patch disabled
        command: kubectl koo patch groupbinding $USER $GROUP --disabled
        retCode: 0
        output: GroupBinding updated successfully.
      - name: Check resource
        command: kubectl -n $NS get koogroupbinding "$GROUP_BINDING" -o=jsonpath="{.metadata.name}:{.spec.disabled}"
        output: "$GROUP_BINDING:true"

      - name: Patch enabled
        command: kubectl koo patch groupbinding $USER $GROUP --enabled
        retCode: 0
        output: GroupBinding updated successfully.
      - name: Check resource
        command: kubectl -n $NS get koogroupbinding "$GROUP_BINDING" -o=jsonpath="{.metadata.name}:{.spec.disabled}"
        output: "$GROUP_BINDING:false"

  - name: Test patch on non existing
    steps:
      - name: Patch on non existing
        command: kubectl koo patch groupbinding $USER $GROUP
        retCode: 4
        outputExp: "404.*GroupBinding[\\ ][\\']$GROUP_BINDING[\\'][\\ ]does[\\ ]not[\\ ]exists"

