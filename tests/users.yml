
name: Test koobind/users

exitOnFail: no

globalSetup:
  - USER="t-usr1"
  - COMMENT="what a nice user"
  - COMMENT2="what a very nice user"
  - COMMON_NAME="User ONE"
  - EMAIL="user1@test.com"
  - PASSWORD="usr1"
  - PASSWORDBIS="usr1b"
  - PASSWORD_HASH='$2a$10$gZvOBaxzqZtOvWS6Q/YqreNafTIbU62jvF/y494OyhmdCKq/xNHKe'
  - MY_UID="1222"
  - NS="koo-system"
  - ADMIN_USER="admin"
  - ADMIN_PASSWORD="admin"
  - kubectl koo login --user "$ADMIN_USER" --password "$ADMIN_PASSWORD" >/dev/null
  - kubectl koo delete user $USER >/dev/null || true  # In case of previous failure

globalTearDown: []

setup: []

tearDown:
  - kubectl koo delete user $USER >/dev/null || true

tests:

  - name: Simple create
    steps:
      - name: initial create
        command: kubectl koo create user $USER
        retCode: 0
        output: User created successfully.
        echo: no
      - name: Check resource
        command: kubectl -n $NS get koouser "$USER" -o=jsonpath="{.metadata.name}:{.spec.comment}:{.spec.commonName}:{.spec.email}:{.spec.uid}:{.spec.passwordHash}:{.spec.disabled}"
        output: "$USER::::::"
      - name: Try to recreate
        command: kubectl koo create user $USER
        retCode: 9
        outputExp: "409.*User[\\ ][\\']$USER[\\'][\\ ]already[\\ ]exists"

  - name: Create with all parameters
    steps:
      - name: initial create
        command: kubectl koo create user $USER --comment "$COMMENT" --commonName "$COMMON_NAME" --email "$EMAIL" --passwordHash "$PASSWORD_HASH" --uid "$MY_UID" --disabled
        retCode: 0
        output: User created successfully.
      - name: Check resource
        command: kubectl -n $NS get koouser "$USER" -o=jsonpath="{.metadata.name}:{.spec.comment}:{.spec.commonName}:{.spec.email}:{.spec.uid}:{.spec.passwordHash}:{.spec.disabled}"
        output: "$USER:$COMMENT:$COMMON_NAME:$EMAIL:$MY_UID:$PASSWORD_HASH:true"

  - name: Check login
    steps:
      - name: Create user
        command: kubectl koo create user $USER --commonName "$COMMON_NAME" --email "$EMAIL" --passwordHash $(kubectl koo hash --password "$PASSWORD") --uid "$MY_UID"
        retCode: 0
        output: User created successfully.
      - name: Check login
        command: kubectl koo login --user "$USER" --password "$PASSWORD"
        retCode: 0
        output: "logged successfully.."
      - name: Restore admin login
        command: kubectl koo login --user "$ADMIN_USER" --password "$ADMIN_PASSWORD" >/dev/null
        retCode: 0



  - name: Test Apply
    steps:
      - name: Initial apply
        command: kubectl koo apply user $USER
        retCode: 0
        output: User created successfully.
      - name: Check resource
        command: kubectl -n $NS get koouser "$USER" -o=jsonpath="{.metadata.name}:{.spec.comment}:{.spec.commonName}:{.spec.email}:{.spec.uid}:{.spec.passwordHash}:{.spec.disabled}"
        output: "$USER::::::"

      - name: re-apply same value
        command: kubectl koo apply user $USER
        retCode: 0
        output: User updated successfully.
      - name: Check resource
        command: kubectl -n $NS get koouser "$USER" -o=jsonpath="{.metadata.name}:{.spec.comment}:{.spec.commonName}:{.spec.email}:{.spec.uid}:{.spec.passwordHash}:{.spec.disabled}"
        output: "$USER::::::"

      - name: apply All values
        command: kubectl koo apply user $USER --comment "$COMMENT" --commonName "$COMMON_NAME" --email "$EMAIL" --passwordHash "$PASSWORD_HASH" --uid "$MY_UID" --disabled
        retCode: 0
        output: User updated successfully.
      - name: Check resource
        command: kubectl -n $NS get koouser "$USER" -o=jsonpath="{.metadata.name}:{.spec.comment}:{.spec.commonName}:{.spec.email}:{.spec.uid}:{.spec.passwordHash}:{.spec.disabled}"
        output: "$USER:$COMMENT:$COMMON_NAME:$EMAIL:$MY_UID:$PASSWORD_HASH:true"

      - name: apply only comment
        command: kubectl koo apply user $USER --comment "$COMMENT"
        retCode: 0
        output: User updated successfully.
      - name: Check resource
        command: kubectl -n $NS get koouser "$USER" -o=jsonpath="{.metadata.name}:{.spec.comment}:{.spec.commonName}:{.spec.email}:{.spec.uid}:{.spec.passwordHash}:{.spec.disabled}"
        output: "$USER:$COMMENT:::::"

      - name: apply only disabled
        command: kubectl koo apply user $USER --disabled
        retCode: 0
        output: User updated successfully.
      - name: Check resource
        command: kubectl -n $NS get koouser "$USER" -o=jsonpath="{.metadata.name}:{.spec.comment}:{.spec.commonName}:{.spec.email}:{.spec.uid}:{.spec.passwordHash}:{.spec.disabled}"
        output: "$USER::::::true"

      - name: apply only enabled
        command: kubectl koo apply user $USER --enabled
        retCode: 0
        output: User updated successfully.
      - name: Check resource
        command: kubectl -n $NS get koouser "$USER" -o=jsonpath="{.metadata.name}:{.spec.comment}:{.spec.commonName}:{.spec.email}:{.spec.uid}:{.spec.passwordHash}:{.spec.disabled}"
        output: "$USER::::::false"

      - name:  Back to no parameters
        command: kubectl koo apply user $USER
        retCode: 0
        output: User updated successfully.
      - name: Check resource
        command: kubectl -n $NS get koouser "$USER" -o=jsonpath="{.metadata.name}:{.spec.comment}:{.spec.commonName}:{.spec.email}:{.spec.uid}:{.spec.passwordHash}:{.spec.disabled}"
        output: "$USER::::::"

  - name: test patch
    steps:
      - name: initial create
        command: kubectl koo create user $USER
        retCode: 0
      - name: Check resource
        command: kubectl -n $NS get koouser "$USER" -o=jsonpath="{.metadata.name}:{.spec.comment}:{.spec.disabled}"
        output: "$USER::"

      - name: Patch comment
        command: kubectl koo patch user $USER --comment "$COMMENT"
        retCode: 0
        output: User updated successfully.
      - name: Check resource
        command: kubectl -n $NS get koouser "$USER" -o=jsonpath="{.metadata.name}:{.spec.comment}:{.spec.commonName}:{.spec.email}:{.spec.uid}:{.spec.passwordHash}:{.spec.disabled}"
        output: "$USER:$COMMENT:::::"

      - name: Patch disabled
        command: kubectl koo patch user $USER --disabled
        retCode: 0
        output: User updated successfully.
      - name: Check resource
        command: kubectl -n $NS get koouser "$USER" -o=jsonpath="{.metadata.name}:{.spec.comment}:{.spec.commonName}:{.spec.email}:{.spec.uid}:{.spec.passwordHash}:{.spec.disabled}"
        output: "$USER:$COMMENT:::::true"

      - name: Patch enabled
        command: kubectl koo patch user $USER --enabled
        retCode: 0
        output: User updated successfully.
      - name: Check resource
        command: kubectl -n $NS get koouser "$USER" -o=jsonpath="{.metadata.name}:{.spec.comment}:{.spec.commonName}:{.spec.email}:{.spec.uid}:{.spec.passwordHash}:{.spec.disabled}"
        output: "$USER:$COMMENT:::::false"

      - name: Patch commonName
        command: kubectl koo patch user $USER --commonName "$COMMON_NAME"
        retCode: 0
        output: User updated successfully.
      - name: Check resource
        command: kubectl -n $NS get koouser "$USER" -o=jsonpath="{.metadata.name}:{.spec.comment}:{.spec.commonName}:{.spec.email}:{.spec.uid}:{.spec.passwordHash}:{.spec.disabled}"
        output: "$USER:$COMMENT:$COMMON_NAME::::false"

      - name: Patch email
        command: kubectl koo patch user $USER --email "$EMAIL"
        retCode: 0
        output: User updated successfully.
      - name: Check resource
        command: kubectl -n $NS get koouser "$USER" -o=jsonpath="{.metadata.name}:{.spec.comment}:{.spec.commonName}:{.spec.email}:{.spec.uid}:{.spec.passwordHash}:{.spec.disabled}"
        output: "$USER:$COMMENT:$COMMON_NAME:$EMAIL:::false"

      - name: Patch uid
        command: kubectl koo patch user $USER --uid "$MY_UID"
        retCode: 0
        output: User updated successfully.
      - name: Check resource
        command: kubectl -n $NS get koouser "$USER" -o=jsonpath="{.metadata.name}:{.spec.comment}:{.spec.commonName}:{.spec.email}:{.spec.uid}:{.spec.passwordHash}:{.spec.disabled}"
        output: "$USER:$COMMENT:$COMMON_NAME:$EMAIL:$MY_UID::false"

      - name: Patch passwordHash
        command: kubectl koo patch user $USER --passwordHash "$PASSWORD_HASH"
        retCode: 0
        output: User updated successfully.
      - name: Check resource
        command: kubectl -n $NS get koouser "$USER" -o=jsonpath="{.metadata.name}:{.spec.comment}:{.spec.commonName}:{.spec.email}:{.spec.uid}:{.spec.passwordHash}:{.spec.disabled}"
        output: "$USER:$COMMENT:$COMMON_NAME:$EMAIL:$MY_UID:$PASSWORD_HASH:false"

      - name: Change comment
        command: kubectl koo patch user $USER --comment "$COMMENT2"
        retCode: 0
        output: User updated successfully.
      - name: Check resource
        command: kubectl -n $NS get koouser "$USER" -o=jsonpath="{.metadata.name}:{.spec.comment}:{.spec.commonName}:{.spec.email}:{.spec.uid}:{.spec.passwordHash}:{.spec.disabled}"
        output: "$USER:$COMMENT2:$COMMON_NAME:$EMAIL:$MY_UID:$PASSWORD_HASH:false"

  - name: Test patch on non existing
    steps:
      - name: Patch on non existing
        command: kubectl koo patch user $USER
        retCode: 4
        outputExp: "404.*User[\\ ][\\']$USER[\\'][\\ ]does[\\ ]not[\\ ]exists"

  - name: Check change password
    steps:
      - name: Create user
        command: kubectl koo create user $USER --commonName "$COMMON_NAME" --email "$EMAIL" --passwordHash $(kubectl koo hash --password "$PASSWORD") --uid "$MY_UID"
        retCode: 0
        output: User created successfully.
      - name: Check login
        command: kubectl koo login --user "$USER" --password "$PASSWORD"
        retCode: 0
        output: "logged successfully.."
      - name: Change my password
        command: kubectl koo password --oldPassword $PASSWORD --newPassword $PASSWORDBIS
        retCode: 0
        output: "Password changed successfully."
      - name: Check login with new password
        command: kubectl koo login --user "$USER" --password "$PASSWORDBIS"
        retCode: 0
        output: "logged successfully.."
      - name: Change my password with wrong old one
        command: kubectl koo password --oldPassword $PASSWORD --newPassword $PASSWORDBIS
        retCode: 125
        outputExp: "400.*Invalid[\\ ]old[\\ ]password"
      - name: Restore admin login
        command: kubectl koo login --user "$ADMIN_USER" --password "$ADMIN_PASSWORD" >/dev/null
        retCode: 0




