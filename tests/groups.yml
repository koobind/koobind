
name: Test koobind/groups

globalSetup:
  - GROUP="t-grp1"
  - DESCRIPTION="what a nice group"
  - DESCRIPTION2="what a very nice group"
  - NS="koo-system"
  - kubectl koo login --user admin --password admin >/dev/null


globalTearDown: []

setup:
  - kubectl koo delete group $GROUP >/dev/null || true

tearDown: []

tests:

  - name: Simple create
    steps:
      - name: initial create
        command: kubectl koo create group $GROUP
        retCode: 0
        output: Group created sucessfully.
        echo: no
      - name: Check resource
        command: kubectl -n $NS get koogroup "$GROUP" -o=jsonpath="{.metadata.name}:{.spec.description}:{.spec.disabled}"
        output: "$GROUP::"
      - name: Try to recreate
        command: kubectl koo create group $GROUP
        retCode: 9
        outputExp: "409.*Group[\\ ][\\']$GROUP[\\'][\\ ]already[\\ ]exists"

  - name: Create with all parameters
    steps:
      - name: initial create
        command: kubectl koo create group $GROUP --description "$DESCRIPTION" --disabled
        retCode: 0
        output: Group created sucessfully.
      - name: Check resource
        command: kubectl -n $NS get koogroup "$GROUP" -o=jsonpath="{.metadata.name}:{.spec.description}:{.spec.disabled}"
        output: "$GROUP:$DESCRIPTION:true"

  - name: Test Apply
    steps:
      - name: Initial apply
        command: kubectl koo apply group $GROUP
        retCode: 0
        output: Group created sucessfully.
      - name: Check resource
        command: kubectl -n $NS get koogroup "$GROUP" -o=jsonpath="{.metadata.name}:{.spec.description}:{.spec.disabled}"
        output: "$GROUP::"
      - name: re-apply same value
        command: kubectl koo apply group $GROUP
        retCode: 0
        output: Group updated sucessfully.
      - name: Check resource
        command: kubectl -n $NS get koogroup "$GROUP" -o=jsonpath="{.metadata.name}:{.spec.description}:{.spec.disabled}"
        output: "$GROUP::"
      - name: apply All values
        command: kubectl koo apply group $GROUP --description "$DESCRIPTION" --disabled
        retCode: 0
        output: Group updated sucessfully.
      - name: Check resource
        command: kubectl -n $NS get koogroup "$GROUP" -o=jsonpath="{.metadata.name}:{.spec.description}:{.spec.disabled}"
        output: "$GROUP:$DESCRIPTION:true"
      - name: apply only description
        command: kubectl koo apply group $GROUP --description "$DESCRIPTION"
        retCode: 0
        output: Group updated sucessfully.
      - name: Check resource
        command: kubectl -n $NS get koogroup "$GROUP" -o=jsonpath="{.metadata.name}:{.spec.description}:{.spec.disabled}"
        output: "$GROUP:$DESCRIPTION:"
      - name: apply only disabled
        command: kubectl koo apply group $GROUP --disabled
        retCode: 0
        output: Group updated sucessfully.
      - name: Check resource
        command: kubectl -n $NS get koogroup "$GROUP" -o=jsonpath="{.metadata.name}:{.spec.description}:{.spec.disabled}"
        output: "$GROUP::true"
      - name: apply only enabled
        command: kubectl koo apply group $GROUP --enabled
        retCode: 0
        output: Group updated sucessfully.
      - name: Check resource
        command: kubectl -n $NS get koogroup "$GROUP" -o=jsonpath="{.metadata.name}:{.spec.description}:{.spec.disabled}"
        output: "$GROUP::false"
      - name:  Back to no parameters
        command: kubectl koo apply group $GROUP
        retCode: 0
        output: Group updated sucessfully.
      - name: Check resource
        command: kubectl -n $NS get koogroup "$GROUP" -o=jsonpath="{.metadata.name}:{.spec.description}:{.spec.disabled}"
        output: "$GROUP::"

  - name: Patch on non existing
    steps:
      - name: Patch on non existing
        command: kubectl koo patch group $GROUP
        retCode: 4
        outputExp: "404.*Group[\\ ][\\']$GROUP[\\'][\\ ]does[\\ ]not[\\ ]exists"

  - name: Patch
    steps:
      - name: initial create
        command: kubectl koo create group $GROUP
        retCode: 0
      - name: Check resource
        command: kubectl -n $NS get koogroup "$GROUP" -o=jsonpath="{.metadata.name}:{.spec.description}:{.spec.disabled}"
        output: "$GROUP::"
      - name: Patch description
        command: kubectl koo patch group $GROUP --description "$DESCRIPTION"
      - name: Check resource
        command: kubectl -n $NS get koogroup "$GROUP" -o=jsonpath="{.metadata.name}:{.spec.description}:{.spec.disabled}"
        output: "$GROUP:$DESCRIPTION:"
      - name: Patch disabled
        command: kubectl koo patch group $GROUP --disabled
      - name: Check resource
        command: kubectl -n $NS get koogroup "$GROUP" -o=jsonpath="{.metadata.name}:{.spec.description}:{.spec.disabled}"
        output: "$GROUP:$DESCRIPTION:true"
      - name: Patch enabled
        command: kubectl koo patch group $GROUP --enabled
      - name: Check resource
        command: kubectl -n $NS get koogroup "$GROUP" -o=jsonpath="{.metadata.name}:{.spec.description}:{.spec.disabled}"
        output: "$GROUP:$DESCRIPTION:false"
      - name: Change description
        command: kubectl koo patch group $GROUP --description "$DESCRIPTION2"
      - name: Check resource
        command: kubectl -n $NS get koogroup "$GROUP" -o=jsonpath="{.metadata.name}:{.spec.description}:{.spec.disabled}"
        output: "$GROUP:$DESCRIPTION2:false"
